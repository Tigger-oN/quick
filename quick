#!/bin/sh
#
# Helper script for viewing a collection of notes.
#
# Where the quick notes are stored.
Q_PATH=""
# Which PAGER / text viewer to use? If left blank, we default to $PAGER, still
# blank, check for less, then more. If neither are found we are very surprised. 
Q_PAGER=""
# What editor to use with new notes?
Q_EDITOR=""
# A list of all the quick files will be populated here.
Q_LIST=""
# Used to keep track of the script version. yyyymmdd format for changes.
Q_VERSION="20240920"
# The RC file
Q_RC="${HOME}/.quick/.quickrc"
# Default paths for searching
Q_PATH_DEFAULT="${HOME}/.quick ${HOME}/bin/.quick /usr/local/share/quick"
# Will hold the search path(s) for displaying.
Q_PATH_DISPLAY=""

usage () {
    for l in ${Q_PATH_DEFAULT}
    do
        sd="${sd} $l
"
    done
    # Check for a custom search path
    subGetPathDisplay
    custom_path=""
    if [ -n "${Q_PATH_DISPLAY}" -a "${sd}" != "${Q_PATH_DISPLAY}" ]
    then
        custom_path="
The following custom directory or directories have been set for searching:

${Q_PATH_DISPLAY}
Only the notes saved to your custom path(s) will be loaded. 
"
    fi

    out="
Quickly load a note you have written.

 ${0##*/} [note | l | list | V | version]

At least one option must be passed.

 note        : The first unique part or the full name of the note to be loaded.
 l | list    : List all the stored notes and their location.
 V | version : Show the version of the script and some other information.
 
The preset search directories for notes are:

${sd}${custom_path}
The profile varaible \${PAGER} (if set) will be used to view the notes. If not
set or invalid, then \"less\" (if found) or \"more\" will be used.

Limitations and rules.

If there are two notes with the same name in different search directories, the
note in the first directory will be shown. This is helpful if you have a system
wide note but would like to have your own extended or modified version, or just
a completly different one with the same name.
 
Rules for the notes:
 
 Must end in \".q\"
 Must be a plain text file
 Must be saved in a search directory
 
For example: you could keep track of birthdays in a file called \"bdays.q\", saved
to one of the search directories. To view the note you would type:
 
 ${0##*/} bdays

In the example above, if \"bdays.q\" did not exist you will be asked if you
would like to create a new note. The file will be saved to first directory in
your search lists.

The following run command file can be edited to set a few options.
 
 ${Q_RC}

The options that can be set in the run command file are:

 Q_EDITOR  : Set an editor for new notes. Defaults to \"vim\" then \"vi\".
 Q_PAGER   : Use a different text viewer. For example: \"vim\".
 Q_PATH    : Set your own search directories.

The following note names will clash with the command line options. For this
reason you can not have a note with these names and filenames:

 l         : l.q
 list      : list.q
 V         : V.q
 version   : version.q

Information:

 Version   : ${Q_VERSION}
 Editor    : ${Q_EDITOR##*/}
 Pager     : ${Q_PAGER##*/}
"
    printf "%s\n" "${out}"

    exit
}

# Return the list of notes, unsorted.
getQList () {
    checkQPathValid
    Q_LIST=`find ${Q_PATH} -type f -name "*.q" | awk -F\/ '{printf " %-24s : %s\n", substr($NF,1,length($NF)-2), $0}'`
}

# Make sure we have values for the key items.
checkDefaults () {
    # Q_PATH
    if [ -z "${Q_PATH}" ]
    then
        Q_PATH="${Q_PATH_DEFAULT}"
    fi
    # Q_PAGER
    subGetPager
    # Q_EDITOR
    subGetEditor
}

# Check the search directories are valid
checkQPathValid () {
    tmp=""
    for p in ${Q_PATH}
    do
        if [ -d "${p}" ]
        then
            tmp="${tmp}${p} "
        fi
    done
    if [ -z "${tmp}" ]
    then
        subGetPathDisplay
        printf "\nUnable to locate any quick search directories. This is a surprise. Is it\n\
possible you have a read only system or have a set an invalid path to Q_PATH\n\
in the run command file?\n\n\
Was looking for the following:\n\n\
%s\n" "${Q_PATH_DISPLAY}"
        exit 1
    fi
    Q_PATH=${tmp}
}

# Basic check
checkSetup () {
    if [ ! -d "${HOME}/.quick" ]
    then
        mkdir "${HOME}/.quick"
    fi
    if [ ! -f "${Q_RC}" ]
    then
        rc="# The following options are available. Default values are shown. Uncomment
# (remove the #), make a change, save.
#
# Which pager to use to view the notes. If \${PAGER} is blank, a check for
# \"less\", then \"more\" is performed.
#Q_PAGER=\"\${PAGER}\"
#
# The search directories for the notes. You can also add more than one
# location. If there is a space in the directory path you will need to escape
# it as a space is used as the seperator.
#Q_PATH=\"${Q_PATH_DEFAULT}\"
#
# What editor to use for new notes. If not set, the seach order will be:
#  vim, vi
#Q_EDITOR=\"\"
"
        printf "${rc}" > "${Q_RC}"
    fi
}
# Create a new note in the first search directory
cmdEdit () {
    if [ -z "${1}" ]
    then
        # Should not happen
        exit 1
    fi
    # Need to know the location to save the file
    sp=""
    for p in ${Q_PATH}
    do
        sp="${p}"
        break;
    done
    # Write access will be required for sp
    if [ ! -d "${sp}" ]
    then
        printf "\nThe search path is not a directory. Was looking at:\n\n\
 %s\n\
\nPlease edit the Q_PATH variable to point to at least one writable directory.\n\n" "${sp}"
        exit 1
    fi
    if [ ! -w "${sp}" ]
    then
        printf "\nUnable to write to the first search path directory. Was looking at:\n\n\
 %s\n\
\nPlease adjust the write permissions on this directory or edit the Q_PATH
variable to point to at least one writable directory.\n\n" "${sp}"
        exit 1
    fi
    # Editor should have been checked already
    ${Q_EDITOR} "${sp}/${1}.q"
}

# Get a list of all the quick notes, sort and present.
cmdList () {
    getQList
    if [ -z "${Q_LIST}" ]
    then
        printf "\nUnable to locate any quick notes. You can create your first note with:\n\n\
 %s FirstNote\n\n\
This will create a note called \"FirstNote\".\n\n" "${0##*/}"
        exit
    else
        Q_LIST=`printf "%s" "${Q_LIST}" | sort`
        printf "\nFound the following quick notes. You can view any with:\n\n\
 %s name\n\n\
%s\n\n" "${0##*/}" "${Q_LIST}"
    fi
    exit
}

# Check, then load a note
cmdQ () {
    checkQPathValid
    n=""
    for p in ${Q_PATH}
    do
        # Check for an exact match first, then a fuzzy search
        tmp=`find "${p}" -name "${1}.q"`
        if [ -z "${tmp}" ]
        then
            tmp=`find "${p}" -name "${1}*.q"`
        fi
        c=`printf "${tmp}" | grep -c '^'`
        if [ ${c} -gt 1 ]
        then
            tmp=`printf "${tmp}" | awk -F\/ '{printf " %-24s : %s\n", substr($NF,1,length($NF)-2), $0}'`
            printf "\nThe request was ambiguous. You will need to type more of the note name.\n\
\n%s\n\n" "${tmp}"
            exit
        elif [ ${c} -eq 1 ]
        then
            n="${tmp}"
            break
        fi
    done
    if [ -z "${n}" ]
    then
        # No note found. Offer the option to make one.
        printf "\nUnable to locate that quick note.\n\n\
Would you like to create a note called \"%s\"? (Y/n) " "${1}"
        read ans
        if [ "${ans}" = "" -o "${ans}" = "Y" -o "${ans}" = "y" ]
        then
            cmdEdit "${1}"
        else
            printf "\nAll done.\n\n"
            exit
        fi
    else
        # A note was found.
        ${Q_PAGER} "${n}"
    fi
}

# Script version and some more details.
cmdVersion () {
    getQList
    subGetPathDisplay
    c=`printf "${Q_LIST}" | grep -c '^'`
    out="
 Version     : ${Q_VERSION}
 Editor      : ${Q_EDITOR##*/}
 Pager       : ${Q_PAGER##*/}
 Notes found : ${c}

Search path(s) for notes:

${Q_PATH_DISPLAY}
"
    printf "%s" "${out}"
    exit
}

subGetEditor () {
    if [ -n "${Q_EDITOR}" ]
    then
        # An editor has been set, but is it valid
        if [ ! -f "${Q_EDITOR}" ]
        then
            # Not a full path. Need to check it.
            tmp=`command -v "${Q_EDITOR}"`
            if [ -n "${tmp}" ]
            then
                Q_EDITOR="${tmp}"
            else
                printf "\nAn editor has been set with \"Q_EDITOR\" but the application can not be located.\n\n\
Was looking for: \"${Q_EDITOR}\"\n\n"
                exit 1
            fi
        fi
    else
        # check for vim the vi
        Q_EDITOR=`command -v vim`
        if [ -z "${Q_EDITOR}" ]
        then
            Q_EDITOR=`command -v vi`
        fi
        if [ -z "${Q_EDITOR}" ]
        then
            printf "\nThis is a surprise. Unable to locate either \"vim\" or \"vi\" on your system.\n\n\
Please edit the \"Q_EDITOR\" variable in the following run command file:\n\n\
 %s\n\n\
An editor is required for new notes.\n\n" "${Q_RC}"
            exit 1
        fi
    fi
}
subGetPager () {
    tmp=""
    if [ -n "${Q_PAGER}" ]
    then
        tmp=`command -v "${Q_PAGER}"`
        if [ -z "${tmp}" ]
        then
            printf "\nYour requested pager can not be located. Was looking for:\n\n\
 %s\n\n\
If the pager is valid, please set the variable Q_PAGER to the full path of the\n\
application.\n\n" "${Q_PAGER}"
            exit 1
        fi
    else
        if [ -n "${PAGER}" ]
        then
            tmp=`command -v ${PAGER}`
        fi
        if [ -z "${tmp}" ]
        then
            tmp=`command -v less`
        fi
        if [ -z "${tmp}" ]
        then
            tmp=`command -v more`
        fi
        if [ -z "${tmp}" ]
        then
            # Really? Is that even possible.
            printf "\nUnable to locate a pager (text viewer). This is a massive surprise. You will\n\
need to install either \"less\" or \"more\" or set the Q_PAGER variable in the\n\
following run command file to a text viewer:\n\n\
 %s\n\n" "${Q_RS}"
            exit 1
        fi
    fi
    Q_PAGER="${tmp}"
}
subGetPathDisplay () {
    tmp="${Q_PATH_DEFAULT}"
    if [ -n "${Q_PATH}" ]
    then
        tmp="${Q_PATH}"
    fi
    for l in ${tmp}
    do
        Q_PATH_DISPLAY="${Q_PATH_DISPLAY} $l
"
    done
}

# Basic checks
checkSetup

# Local options / settings
if [ -f "${Q_RC}" ]
then
    . "${Q_RC}"
fi

# checkDefaults is called after the local .quickrc is loaded. This may seem
# backwards but does make things easier to check.
checkDefaults

if [ -z "${1}" ]
then
    usage
fi

# Request check
case "${1}" in
    -h|--help|-H|-HELP) usage; return;;
    l|list) cmdList; return;;
    V|version) cmdVersion; return;;
    *) cmdQ "${1}"; return;;
esac

